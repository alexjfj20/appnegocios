// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String
  role              String    @default("user")
  storeId           Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  store             Store?    @relation(fields: [storeId], references: [id])
  notificationSettings NotificationSettings?
  preferences       UserPreferences?
  roles             UserRole[]
}

model Store {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  address           String?
  phone             String?
  email             String?
  logo              String?
  banner            String?
  favicon           String?
  primaryColor      String?
  whatsappApiKey    String?
  googleAnalyticsId String?
  facebookPixelId   String?
  paymentMethods    String[]
  stripeApiKey      String?
  stripePublicKey   String?
  bankAccount       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  users             User[]
  products          Product[]
  orders            Order[]
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  stock             Int       @default(0)
  image             String?
  storeId           Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  store             Store     @relation(fields: [storeId], references: [id])
  orderItems        OrderItem[]
}

model Order {
  id                Int       @id @default(autoincrement())
  storeId           Int
  customerName      String
  customerEmail     String?
  customerPhone     String?
  status            String    @default("pending")
  total             Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  store             Store     @relation(fields: [storeId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id                Int       @id @default(autoincrement())
  orderId           Int
  productId         Int
  quantity          Int
  price             Float
  order             Order     @relation(fields: [orderId], references: [id])
  product           Product   @relation(fields: [productId], references: [id])
}

model NotificationSettings {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  email             Boolean   @default(true)
  push              Boolean   @default(true)
  whatsapp          Boolean   @default(false)
  orderUpdates      Boolean   @default(true)
  inventoryAlerts   Boolean   @default(true)
  promotions        Boolean   @default(true)
  user              User      @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  language          String    @default("es")
  theme             String    @default("light")
  timezone          String    @default("America/Mexico_City")
  user              User      @relation(fields: [userId], references: [id])
}

model Permission {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  description       String?
  createdAt         DateTime  @default(now())
  roles             RolePermission[]
}

model Role {
  id                Int       @id @default(autoincrement())
  name              String    @unique
  description       String?
  isSystem          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  permissions       RolePermission[]
  users             UserRole[]
}

model RolePermission {
  roleId            Int
  permissionId      Int
  role              Role      @relation(fields: [roleId], references: [id])
  permission        Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

model UserRole {
  userId            Int
  roleId            Int
  user              User      @relation(fields: [userId], references: [id])
  role              Role      @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}
